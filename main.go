// Copyright 2018 Hajime Hoshi
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// file2byteslice is a dead simple tool to embed a file to Go.
package main

import (
	"bytes"
	"compress/gzip"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
)

var (
	inputFilename  = flag.String("input", "", "input filename")
	outputFilename = flag.String("output", "", "output filename")
	packageName    = flag.String("package", "main", "package name")
	varName        = flag.String("var", "_", "variable name")
	varIndex       = flag.String("varindex", "", "variable index")
	compress       = flag.Bool("compress", false, "use gzip compression")
	buildtags      = flag.String("buildtags", "", "build tags")
	folder         = flag.Bool("folder", false, "all folder file input")
)

func write(w io.Writer, r io.Reader) error {
	if *compress {
		compressed := &bytes.Buffer{}
		cw, err := gzip.NewWriterLevel(compressed, gzip.BestCompression)
		if err != nil {
			return err
		}
		if _, err := io.Copy(cw, r); err != nil {
			return err
		}
		cw.Close()
		r = compressed
	}

	bs, err := ioutil.ReadAll(r)
	if err != nil {
		return err
	}

	if _, err := fmt.Fprintln(w, "// Code generated by file2byteslice. DO NOT EDIT."); err != nil {
		return err
	}
	if _, err := fmt.Fprintln(w, "// (gofmt is fine after generating)"); err != nil {
		return err
	}
	if *buildtags != "" {
		if _, err := fmt.Fprintln(w, "\n// +build "+*buildtags); err != nil {
			return err
		}
	}
	if _, err := fmt.Fprintln(w, ""); err != nil {
		return err
	}
	if _, err := fmt.Fprintln(w, "\npackage "+*packageName); err != nil {
		return err
	}
	if *varIndex == "" {
		if _, err := fmt.Fprintf(w, "var %s = []byte(%q)", *varName, string(bs)); err != nil {
			return err
		}
	} else {
		if _, err := fmt.Fprintf(w, "func init() { %s[%s] = []byte(%q) }", *varName, *varIndex, string(bs)); err != nil {
			return err
		}
	}
	return nil
}

func run() error {
	var out io.Writer
	if *outputFilename != "" {
		f, err := os.Create(*outputFilename)
		if err != nil {
			return err
		}
		defer f.Close()
		out = f
	} else {
		out = os.Stdout
	}

	var in io.Reader
	if *inputFilename != "" {
		f, err := os.Open(*inputFilename)
		if err != nil {
			return err
		}
		defer f.Close()
		in = f
	} else {
		in = os.Stdin
	}

	if err := write(out, in); err != nil {
		return err
	}

	return nil
}

func main() {
	flag.Parse()
	if *folder {
		dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
		if err != nil {
			log.Fatal(err)
		}
		fmt.Println("folder", filepath.Base(dir))

		files, err := ioutil.ReadDir("./")
		if err != nil {
			log.Fatal(err)
		}
		current := 0
		size := len(files)
		*packageName = filepath.Base(dir)
		for _, f := range files {
			//fmt.Println(f.Name())
			fmt.Println("\nGenerate file: ", f.Name())
			if !f.IsDir() {
				*inputFilename = f.Name()
				splitName := strings.Split(*inputFilename, ".")
				*outputFilename = splitName[0] + ".go"
				*varName = strings.Title(strings.Replace(splitName[0], " ", "_", -1)) + "_" + splitName[1]
			}
			if err := run(); err != nil {
				panic(err)
			}
			current++
			fmt.Printf("Finish: %d/%d", current, size)

		}
		fmt.Println("=== Finish ===")
	} else {
		if err := run(); err != nil {
			panic(err)
		}
	}
}
